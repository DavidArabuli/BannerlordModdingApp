M&B Bannerlord modding tools

the goal is to give user ability to modify
- unit`s skill stats (like bow skill, riding etc)
- unit`s inventory (and equipped weapons and armor)

Requires:
I believe that most work on units can be done in spnpccharacters.xml 

Possible flow:
reading existing values from game xml file ->
-> creating data structure to store it -> 
-> pass data to form ->
-> render initial values and default inventories ->
-> gather data from inputs (*mb formdata API?*) ->
-> pack it for xml-js library, in a JSON form ->
-> JSON to xml conversion ->
-> download edited xml.

====
notes and issues so far:

14.04.2024.

Xml->JSON-xml conversion messes up comments, but 
overall it works, without major problems. Game is not crashing, and in-game values are updated successfully.


====

15.04.2024

basic structure for skill modification is created, culture divs populated with appropriate unit cards, with access to skills and other unit data.

to do:
Have to filter units without skills, also filter all the tournament units, smiths etc - all non-hirable units. They are not really needed and only make code convoluted later on.

19.04.2024
Skill editing works just fine, game recognizes changes etc.

20.04.2024
Item modding is trickier, than I thought. 
There are different cases:
 - EquipmentRoster as an array of "equipment"-s
 - EquipmentRoster with property of "equipment" (in cases, where there is only one set of equipment for unit)
 
->
 - unit having full set of items, plus horse and horse harness
 - unit having custom number of items. Not all armor, and not all weapons
 ->
 - items numbers (like item0, item3 etc) are not reliably representing item type (could be arrows, could shield or weapon. Sometimes can be ranged weapon, sometimes melee, no guarantees.)

21.04.2024
- One way to approach item modding, would be dynamically read and render all existing items. The problem is, that in some cases it would make impossible to add certain items, because there will be no inputs for them. So, if unit has 2 items (spear + sword)  , it would be impossible to add shield.

- one way to navigate around it, is to merge shields array with weapons array. 
- another approach, is to just render pre-defined number of inputs, regardless of what units uses currently, and then insert lacking elements into final XML file. 

Then the question is, what to do with units with multiple equipment sets. Should app check how many sets unit has and edit all of them at once? Or should it render more inputs for this kind of units, or even to be able to create extra equip.sets? 

Atm, going to set up logic for changing one set, and working with default item numbers.

+++ also, loading time of all the parsing and rendering is becoming noticeable, especially now, when items and their inputs are rendered too. Have to look into it.

22.04.2024

At the moment it is possible to change items, but only in one equipment roster. And no way to add new items.

First I have to deal with updating multiple equipment arrays, when there is more than one of them.

Second we will see how viable is to add new item functionality here. Mb it gonna be implemented in desktop version of this app, and not here. 

+++ It is possible to change items for all eq.rosters that unit has.
...Loading times even worse now, as all the parsing is becoming "heavier". 

... As for adding items:
One way to approach it, would be to construct an object in itemInput - with all possible items, then fill only properties that actually exist on unit, to render them as existing items, but we still have to pass all of it, to get all possible inputs, even for empty slots, coz selector input is based on the data passed to it.

Since I already am checking for existing slots on form-submission, checking for extra 2-5 slots on unit is not a big deal, but still, might think of the most efficient solution there...

To make things more difficult, for SOME units, horses and horse harnesses are not even part of EquipmentRoster, instead they are part of EquipmentSet.
Which means, that there is yet another thing to check and parse. 
I am starting to think, that I am pushing over the limit of frontend app here, and mb this item adding feature might go to desktop version, but I might want to finish it to see, whether it gonna be acceptable in terms of speed. Atm I haven`t really optimized it. So there is some room for improvement.

23.04.202

Items from all equipmentRosters are rendered and passed to the form.
Basically, for every unit and every equipment roster it has, there is an item object with properties - they are either filled with data, or go as empty string.

Working on inserting item slots into equipmentRosters, when they are not there from the beginning.

Added all the armor arrays and assigned them to appropriate item slots.
Shields and weapons were merged, since game does not distinguish their slots.

Added skill and item flags to inputs, to pass it to the form procession function, otherwise it becomes too complicated, trying to distinguish skills and items. 
There must be check, that ensures that if item slot is not present it gets added, but since all of it comes from form - it might mix up with skills, and they are added instead if empty item-slots.

Added Suspense and Lazy, to lazy load Form component. It will load on separate button press, only when it is needed.

28.04.2024

Item modification took quite a lot of time... Had to rework initial approach, created couple of filters to organize data and make loops faster.
Made it more readable, will revisit to name better, now when it is mostly finished. 

Items can be added to single roster and multiple rosters, existing items can be switched to different items. 

01.05.2024

Added CSS, worked on responsive design. 
Moved "submit and download" functionality into separate module, to make Form.jsx less clattered. 

***  Functionality wise I will call it a day, since atm there is no point in trying to squeeze more features into a pure frontend app, as it just might make it unwieldy and slow. Plus it does not have access to file system, so there is too much inherent limitations.
All the other ideas will go into desktop version from now on.  ****

things to do - revisit naming, check for some edge cases, limit numerical inputs 